// Author: AI Assistant / Claude
// Generated by Claude for GPU-MPC optimizations
// Copyright:
// 
// Copyright (c) 2024 Microsoft Research
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>
#include <stdlib.h>
#include <syslog.h>
#include <string.h>

// Secure error checking macros that don't leak sensitive information

// Generic error message without revealing specific CUDA error details
#define SECURE_ERROR_MSG "GPU computation error - check system logs"

// Forward declaration of secureShutdown function
void secureShutdown();

// Secure CUDA error checking that logs to syslog instead of stderr
template <typename T>
void checkSecure(T result, char const *const func, const char *const file,
                 int const line) {
    if (result) {
        // Log detailed error to syslog (accessible only to system admin)
        syslog(LOG_ERR, "CUDA error at %s:%d code=%d in function %s", 
               file, line, static_cast<unsigned int>(result), func);
        
        // Only show generic error to user/attacker
        fprintf(stderr, "%s\n", SECURE_ERROR_MSG);
        
        // Perform secure shutdown
        secureShutdown();
    }
}

// Secure version of checkCudaErrors that doesn't leak implementation details
#define checkCudaErrorsSecure(val) checkSecure((val), #val, __FILE__, __LINE__)

// Secure error logging function
inline void secureLogError(const char* context, int error_code) {
    // Log to syslog with full details
    syslog(LOG_ERR, "Secure GPU-MPC error in %s: code=%d", context, error_code);
    
    // Only show generic message to stdout/stderr
    printf("Security-related error occurred. Check system logs.\n");
}

// Secure shutdown function that cleans up sensitive data
inline void secureShutdown() {
    // Log shutdown event
    syslog(LOG_WARNING, "GPU-MPC secure shutdown initiated");
    
    // Clear any sensitive data in GPU memory (implementation specific)
    // This should be called before exit to ensure no sensitive data remains
    cudaDeviceReset();  // Reset all GPU contexts
    
    // Exit with generic error code
    exit(EXIT_FAILURE);
}

// Secure version of getLastCudaError
#define getLastCudaErrorSecure(msg) __getLastCudaErrorSecure(msg, __FILE__, __LINE__)

inline void __getLastCudaErrorSecure(const char *errorMessage, const char *file,
                                     const int line) {
    cudaError_t err = cudaGetLastError();
    
    if (cudaSuccess != err) {
        // Log detailed error to syslog
        syslog(LOG_ERR, "CUDA error at %s:%d: %s (code=%d)", 
               file, line, errorMessage, static_cast<int>(err));
        
        // Only show generic error to user
        fprintf(stderr, "%s\n", SECURE_ERROR_MSG);
        
        secureShutdown();
    }
}

// Secure version that only logs but doesn't exit (for non-critical errors)
#define printLastCudaErrorSecure(msg) __printLastCudaErrorSecure(msg, __FILE__, __LINE__)

inline void __printLastCudaErrorSecure(const char *errorMessage, const char *file,
                                       const int line) {
    cudaError_t err = cudaGetLastError();
    
    if (cudaSuccess != err) {
        // Log to syslog
        syslog(LOG_WARNING, "CUDA warning at %s:%d: %s (code=%d)", 
               file, line, errorMessage, static_cast<int>(err));
        
        // Show generic warning to user
        fprintf(stderr, "GPU computation warning occurred\n");
    }
}

// Initialize secure error logging (call once at program start)
inline void initSecureErrorLogging(const char* program_name) {
    openlog(program_name, LOG_PID | LOG_CONS, LOG_USER);
    syslog(LOG_INFO, "GPU-MPC secure error logging initialized");
}

// Cleanup secure error logging (call once at program end)
inline void cleanupSecureErrorLogging() {
    syslog(LOG_INFO, "GPU-MPC secure error logging cleanup");
    closelog();
}