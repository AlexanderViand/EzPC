# GPU-MPC SkyPilot Configuration
# Usage: sky launch sky.yaml --env TEST=scmp --env GPU=T4
# Development: sky launch sky.yaml --env NODES=1
name: gpu-mpc

resources:
  cloud: gcp
  accelerators: T4:1  # Override with --env GPU=L4/A100
  cpus: 4+
  memory: 8+
  use_spot: true
  # Use Google Deep Learning VM with CUDA 12.8 pre-installed (Ubuntu 22.04)
  image_id: projects/deeplearning-platform-release/global/images/common-cu128-ubuntu-2204-nvidia-570-v20250728
  # Auto-terminate after 60 minutes idle (override with --idle-minutes-to-autostop)
  autostop:
    idle_minutes: 60
    down: true  # Terminate instead of just stopping

num_nodes: 2  # Override with --env NODES=1 for dev mode

workdir: .  # Auto-syncs on both sky launch and sky exec
            # Run from GPU-MPC dir: cd GPU-MPC && sky launch skypilot/sky.yaml

setup: |
  echo "=== GPU-MPC VM Setup ==="
  # Already in ~/sky_workdir when using workdir
  
  # Install all dependencies
  sudo apt-get update
  sudo apt-get install -y build-essential cmake git \
    libssl-dev libeigen3-dev libgmp-dev libmpfr-dev
  
  # Auto-detect GPU architecture
  case "${GPU:-T4}" in
    T4) GPU_ARCH=75 ;;
    V100) GPU_ARCH=70 ;;
    A100) GPU_ARCH=80 ;;
    L4) GPU_ARCH=89 ;;
    *) GPU_ARCH=75 ;;
  esac
  
  echo "Building for GPU: ${GPU:-T4} (CUDA arch: $GPU_ARCH)"
  echo "CUDA version: $(nvcc --version | grep release)"
  
  # Ultra-fast CMake build with optimizations
  mkdir -p build && cd build
  
  echo "Starting CMake configuration..."
  time cmake -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CUDA_ARCHITECTURES=$GPU_ARCH \
        -DGPU_MPC_BUILD_ORCA=OFF \
        -DGPU_MPC_BUILD_TESTS=ON \
        -DGPU_MPC_DOWNLOAD_DATASETS=OFF \
        ..
  
  echo "Starting parallel build (using $(nproc) cores)..."
  time cmake --build . --parallel --target mpc_benchmark
  
  echo "Build complete! Copying executable..."
  cp benchmarks/mpc_benchmark ../mpc_benchmark
  
  echo "=== Build Summary ==="
  ls -la ../mpc_benchmark
  echo "Ready for MPC protocols!"
  
  echo "=== Setup Complete ==="

run: |
  # Already in ~/sky_workdir when using workdir
  
  # Development mode (single node)
  if [ "${NODES:-2}" = "1" ]; then
    echo "=== Development Mode ==="
    echo "SSH in and run:"
    echo "  ./mpc_benchmark --task dcf --party 0 --peer localhost --threads 4        # Server"
    echo "  ./mpc_benchmark --task dcf --party 1 --peer localhost --threads 4        # Client"
    sleep infinity
  fi
  
  # Rebuild if requested (works with any task)
  if [ "${REBUILD:-0}" = "1" ]; then
    echo "=== Rebuilding before running task ==="
    cd build
    cmake --build . --parallel --target mpc_benchmark
    cp benchmarks/mpc_benchmark ../
    cd ..
    echo "Rebuild complete!"
  fi
  
  # Production mode (2-party MPC)
  TASK=${TASK:-dcf}
  echo "=== 2-Party MPC Task: $TASK ==="
  
  # Set default parameters
  CPU_THREADS=${CPU_THREADS:-4}
  
  if [ "${SKYPILOT_NODE_RANK}" -eq 0 ]; then
    echo "Server (Party 0)"
    echo "Task: $TASK, CPU Threads: $CPU_THREADS"
    case $TASK in
      dcf|scmp|twomax)
        echo "Running $TASK benchmark..."
        ./mpc_benchmark --task $TASK --party 0 --peer 0.0.0.0 --threads $CPU_THREADS
        ;;
      *) 
        echo "Unknown task: $TASK (available: dcf, scmp, twomax)"
        echo "Usage: sky launch sky.yaml --env TASK=scmp [--env REBUILD=1]"
        exit 1 
        ;;
    esac
  else
    HEAD_IP=$(echo "$SKYPILOT_NODE_IPS" | head -n1)
    echo "Client (Party 1) -> $HEAD_IP"
    echo "Task: $TASK, CPU Threads: $CPU_THREADS"
    sleep 10
    case $TASK in
      dcf|scmp|twomax)
        echo "Running $TASK benchmark as client..."
        ./mpc_benchmark --task $TASK --party 1 --peer $HEAD_IP --threads $CPU_THREADS
        ;;
      *)
        echo "Unknown task: $TASK (available: dcf, scmp, twomax)"
        exit 1
        ;;
    esac
  fi